// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "coprocess_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace coprocess {

void protobuf_ShutdownFile_coprocess_5fcommon_2eproto() {
  StringSlice_default_instance_.Shutdown();
}

void protobuf_InitDefaults_coprocess_5fcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  StringSlice_default_instance_.DefaultConstruct();
  StringSlice_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_coprocess_5fcommon_2eproto_once_);
void protobuf_InitDefaults_coprocess_5fcommon_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_coprocess_5fcommon_2eproto_once_,
                 &protobuf_InitDefaults_coprocess_5fcommon_2eproto_impl);
}
void protobuf_AddDesc_coprocess_5fcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_coprocess_5fcommon_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_coprocess_5fcommon_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_coprocess_5fcommon_2eproto_once_);
void protobuf_AddDesc_coprocess_5fcommon_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_coprocess_5fcommon_2eproto_once_,
                 &protobuf_AddDesc_coprocess_5fcommon_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_coprocess_5fcommon_2eproto {
  StaticDescriptorInitializer_coprocess_5fcommon_2eproto() {
    protobuf_AddDesc_coprocess_5fcommon_2eproto();
  }
} static_descriptor_initializer_coprocess_5fcommon_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
bool HookType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringSlice::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringSlice::StringSlice()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_coprocess_5fcommon_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocess.StringSlice)
}
StringSlice::StringSlice(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena),
  items_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_coprocess_5fcommon_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coprocess.StringSlice)
}

void StringSlice::InitAsDefaultInstance() {
}

StringSlice::StringSlice(const StringSlice& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:coprocess.StringSlice)
}

void StringSlice::SharedCtor() {
  _cached_size_ = 0;
}

StringSlice::~StringSlice() {
  // @@protoc_insertion_point(destructor:coprocess.StringSlice)
  SharedDtor();
}

void StringSlice::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void StringSlice::ArenaDtor(void* object) {
  StringSlice* _this = reinterpret_cast< StringSlice* >(object);
  (void)_this;
}
void StringSlice::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StringSlice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringSlice& StringSlice::default_instance() {
  protobuf_InitDefaults_coprocess_5fcommon_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StringSlice> StringSlice_default_instance_;

StringSlice* StringSlice::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StringSlice>(arena);
}

void StringSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocess.StringSlice)
  items_.Clear();
}

bool StringSlice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocess.StringSlice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_items()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->items(this->items_size() - 1).data(),
            this->items(this->items_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocess.StringSlice.items"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocess.StringSlice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocess.StringSlice)
  return false;
#undef DO_
}

void StringSlice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocess.StringSlice)
  // repeated string items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->items(i).data(), this->items(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocess.StringSlice.items");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:coprocess.StringSlice)
}

size_t StringSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocess.StringSlice)
  size_t total_size = 0;

  // repeated string items = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->items_size());
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->items(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringSlice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringSlice*>(&from));
}

void StringSlice::MergeFrom(const StringSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocess.StringSlice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StringSlice::UnsafeMergeFrom(const StringSlice& from) {
  GOOGLE_DCHECK(&from != this);
  items_.UnsafeMergeFrom(from.items_);
}

void StringSlice::CopyFrom(const StringSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocess.StringSlice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StringSlice::IsInitialized() const {

  return true;
}

void StringSlice::Swap(StringSlice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StringSlice temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StringSlice::UnsafeArenaSwap(StringSlice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StringSlice::InternalSwap(StringSlice* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StringSlice::GetTypeName() const {
  return "coprocess.StringSlice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringSlice

// repeated string items = 1;
int StringSlice::items_size() const {
  return items_.size();
}
void StringSlice::clear_items() {
  items_.Clear();
}
const ::std::string& StringSlice::items(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.StringSlice.items)
  return items_.Get(index);
}
::std::string* StringSlice::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.StringSlice.items)
  return items_.Mutable(index);
}
void StringSlice::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:coprocess.StringSlice.items)
  items_.Mutable(index)->assign(value);
}
void StringSlice::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coprocess.StringSlice.items)
}
void StringSlice::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coprocess.StringSlice.items)
}
::std::string* StringSlice::add_items() {
  // @@protoc_insertion_point(field_add_mutable:coprocess.StringSlice.items)
  return items_.Add();
}
void StringSlice::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coprocess.StringSlice.items)
}
void StringSlice::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coprocess.StringSlice.items)
}
void StringSlice::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coprocess.StringSlice.items)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringSlice::items() const {
  // @@protoc_insertion_point(field_list:coprocess.StringSlice.items)
  return items_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringSlice::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.StringSlice.items)
  return &items_;
}

inline const StringSlice* StringSlice::internal_default_instance() {
  return &StringSlice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocess

// @@protoc_insertion_point(global_scope)
