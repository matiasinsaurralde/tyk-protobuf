// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_session_state.proto

#ifndef PROTOBUF_coprocess_5fsession_5fstate_2eproto__INCLUDED
#define PROTOBUF_coprocess_5fsession_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)

namespace coprocess {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto();
void protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto();
void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

class AccessDefinition;
class AccessSpec;
class BasicAuthData;
class JWTData;
class Monitor;
class SessionState;

// ===================================================================

class AccessSpec : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.AccessSpec) */ {
 public:
  AccessSpec();
  virtual ~AccessSpec();

  AccessSpec(const AccessSpec& from);

  inline AccessSpec& operator=(const AccessSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const AccessSpec& default_instance();

  static const AccessSpec* internal_default_instance();

  void UnsafeArenaSwap(AccessSpec* other);
  void Swap(AccessSpec* other);

  // implements Message ----------------------------------------------

  inline AccessSpec* New() const { return New(NULL); }

  AccessSpec* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AccessSpec& from);
  void MergeFrom(const AccessSpec& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessSpec* other);
  void UnsafeMergeFrom(const AccessSpec& from);
  protected:
  explicit AccessSpec(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);
  ::std::string* unsafe_arena_release_url();
  void unsafe_arena_set_allocated_url(
      ::std::string* url);

  // repeated string methods = 2;
  int methods_size() const;
  void clear_methods();
  static const int kMethodsFieldNumber = 2;
  const ::std::string& methods(int index) const;
  ::std::string* mutable_methods(int index);
  void set_methods(int index, const ::std::string& value);
  void set_methods(int index, const char* value);
  void set_methods(int index, const char* value, size_t size);
  ::std::string* add_methods();
  void add_methods(const ::std::string& value);
  void add_methods(const char* value);
  void add_methods(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& methods() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_methods();

  // @@protoc_insertion_point(class_scope:coprocess.AccessSpec)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> methods_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AccessSpec> AccessSpec_default_instance_;

// -------------------------------------------------------------------

class AccessDefinition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.AccessDefinition) */ {
 public:
  AccessDefinition();
  virtual ~AccessDefinition();

  AccessDefinition(const AccessDefinition& from);

  inline AccessDefinition& operator=(const AccessDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const AccessDefinition& default_instance();

  static const AccessDefinition* internal_default_instance();

  void UnsafeArenaSwap(AccessDefinition* other);
  void Swap(AccessDefinition* other);

  // implements Message ----------------------------------------------

  inline AccessDefinition* New() const { return New(NULL); }

  AccessDefinition* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AccessDefinition& from);
  void MergeFrom(const AccessDefinition& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessDefinition* other);
  void UnsafeMergeFrom(const AccessDefinition& from);
  protected:
  explicit AccessDefinition(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string api_name = 1;
  void clear_api_name();
  static const int kApiNameFieldNumber = 1;
  const ::std::string& api_name() const;
  void set_api_name(const ::std::string& value);
  void set_api_name(const char* value);
  void set_api_name(const char* value, size_t size);
  ::std::string* mutable_api_name();
  ::std::string* release_api_name();
  void set_allocated_api_name(::std::string* api_name);
  ::std::string* unsafe_arena_release_api_name();
  void unsafe_arena_set_allocated_api_name(
      ::std::string* api_name);

  // optional string api_id = 2;
  void clear_api_id();
  static const int kApiIdFieldNumber = 2;
  const ::std::string& api_id() const;
  void set_api_id(const ::std::string& value);
  void set_api_id(const char* value);
  void set_api_id(const char* value, size_t size);
  ::std::string* mutable_api_id();
  ::std::string* release_api_id();
  void set_allocated_api_id(::std::string* api_id);
  ::std::string* unsafe_arena_release_api_id();
  void unsafe_arena_set_allocated_api_id(
      ::std::string* api_id);

  // repeated string versions = 3;
  int versions_size() const;
  void clear_versions();
  static const int kVersionsFieldNumber = 3;
  const ::std::string& versions(int index) const;
  ::std::string* mutable_versions(int index);
  void set_versions(int index, const ::std::string& value);
  void set_versions(int index, const char* value);
  void set_versions(int index, const char* value, size_t size);
  ::std::string* add_versions();
  void add_versions(const ::std::string& value);
  void add_versions(const char* value);
  void add_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_versions();

  // repeated .coprocess.AccessSpec allowed_urls = 4;
  int allowed_urls_size() const;
  void clear_allowed_urls();
  static const int kAllowedUrlsFieldNumber = 4;
  const ::coprocess::AccessSpec& allowed_urls(int index) const;
  ::coprocess::AccessSpec* mutable_allowed_urls(int index);
  ::coprocess::AccessSpec* add_allowed_urls();
  ::google::protobuf::RepeatedPtrField< ::coprocess::AccessSpec >*
      mutable_allowed_urls();
  const ::google::protobuf::RepeatedPtrField< ::coprocess::AccessSpec >&
      allowed_urls() const;

  // @@protoc_insertion_point(class_scope:coprocess.AccessDefinition)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> versions_;
  ::google::protobuf::RepeatedPtrField< ::coprocess::AccessSpec > allowed_urls_;
  ::google::protobuf::internal::ArenaStringPtr api_name_;
  ::google::protobuf::internal::ArenaStringPtr api_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AccessDefinition> AccessDefinition_default_instance_;

// -------------------------------------------------------------------

class BasicAuthData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.BasicAuthData) */ {
 public:
  BasicAuthData();
  virtual ~BasicAuthData();

  BasicAuthData(const BasicAuthData& from);

  inline BasicAuthData& operator=(const BasicAuthData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const BasicAuthData& default_instance();

  static const BasicAuthData* internal_default_instance();

  void UnsafeArenaSwap(BasicAuthData* other);
  void Swap(BasicAuthData* other);

  // implements Message ----------------------------------------------

  inline BasicAuthData* New() const { return New(NULL); }

  BasicAuthData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BasicAuthData& from);
  void MergeFrom(const BasicAuthData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BasicAuthData* other);
  void UnsafeMergeFrom(const BasicAuthData& from);
  protected:
  explicit BasicAuthData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string password = 1;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);
  ::std::string* unsafe_arena_release_password();
  void unsafe_arena_set_allocated_password(
      ::std::string* password);

  // optional string hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);
  ::std::string* unsafe_arena_release_hash();
  void unsafe_arena_set_allocated_hash(
      ::std::string* hash);

  // @@protoc_insertion_point(class_scope:coprocess.BasicAuthData)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BasicAuthData> BasicAuthData_default_instance_;

// -------------------------------------------------------------------

class JWTData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.JWTData) */ {
 public:
  JWTData();
  virtual ~JWTData();

  JWTData(const JWTData& from);

  inline JWTData& operator=(const JWTData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const JWTData& default_instance();

  static const JWTData* internal_default_instance();

  void UnsafeArenaSwap(JWTData* other);
  void Swap(JWTData* other);

  // implements Message ----------------------------------------------

  inline JWTData* New() const { return New(NULL); }

  JWTData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const JWTData& from);
  void MergeFrom(const JWTData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JWTData* other);
  void UnsafeMergeFrom(const JWTData& from);
  protected:
  explicit JWTData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string secret = 1;
  void clear_secret();
  static const int kSecretFieldNumber = 1;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);
  ::std::string* unsafe_arena_release_secret();
  void unsafe_arena_set_allocated_secret(
      ::std::string* secret);

  // @@protoc_insertion_point(class_scope:coprocess.JWTData)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JWTData> JWTData_default_instance_;

// -------------------------------------------------------------------

class Monitor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.Monitor) */ {
 public:
  Monitor();
  virtual ~Monitor();

  Monitor(const Monitor& from);

  inline Monitor& operator=(const Monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const Monitor& default_instance();

  static const Monitor* internal_default_instance();

  void UnsafeArenaSwap(Monitor* other);
  void Swap(Monitor* other);

  // implements Message ----------------------------------------------

  inline Monitor* New() const { return New(NULL); }

  Monitor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Monitor& from);
  void MergeFrom(const Monitor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Monitor* other);
  void UnsafeMergeFrom(const Monitor& from);
  protected:
  explicit Monitor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double trigger_limits = 1;
  int trigger_limits_size() const;
  void clear_trigger_limits();
  static const int kTriggerLimitsFieldNumber = 1;
  double trigger_limits(int index) const;
  void set_trigger_limits(int index, double value);
  void add_trigger_limits(double value);
  const ::google::protobuf::RepeatedField< double >&
      trigger_limits() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_trigger_limits();

  // @@protoc_insertion_point(class_scope:coprocess.Monitor)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< double > trigger_limits_;
  mutable int _trigger_limits_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Monitor> Monitor_default_instance_;

// -------------------------------------------------------------------

class SessionState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.SessionState) */ {
 public:
  SessionState();
  virtual ~SessionState();

  SessionState(const SessionState& from);

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const SessionState& default_instance();

  static const SessionState* internal_default_instance();

  void UnsafeArenaSwap(SessionState* other);
  void Swap(SessionState* other);

  // implements Message ----------------------------------------------

  inline SessionState* New() const { return New(NULL); }

  SessionState* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionState* other);
  void UnsafeMergeFrom(const SessionState& from);
  protected:
  explicit SessionState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional int64 last_check = 1;
  void clear_last_check();
  static const int kLastCheckFieldNumber = 1;
  ::google::protobuf::int64 last_check() const;
  void set_last_check(::google::protobuf::int64 value);

  // optional double allowance = 2;
  void clear_allowance();
  static const int kAllowanceFieldNumber = 2;
  double allowance() const;
  void set_allowance(double value);

  // optional double rate = 3;
  void clear_rate();
  static const int kRateFieldNumber = 3;
  double rate() const;
  void set_rate(double value);

  // optional double per = 4;
  void clear_per();
  static const int kPerFieldNumber = 4;
  double per() const;
  void set_per(double value);

  // optional int64 expires = 5;
  void clear_expires();
  static const int kExpiresFieldNumber = 5;
  ::google::protobuf::int64 expires() const;
  void set_expires(::google::protobuf::int64 value);

  // optional int64 quota_max = 6;
  void clear_quota_max();
  static const int kQuotaMaxFieldNumber = 6;
  ::google::protobuf::int64 quota_max() const;
  void set_quota_max(::google::protobuf::int64 value);

  // optional int64 quota_renews = 7;
  void clear_quota_renews();
  static const int kQuotaRenewsFieldNumber = 7;
  ::google::protobuf::int64 quota_renews() const;
  void set_quota_renews(::google::protobuf::int64 value);

  // optional int64 quota_remaining = 8;
  void clear_quota_remaining();
  static const int kQuotaRemainingFieldNumber = 8;
  ::google::protobuf::int64 quota_remaining() const;
  void set_quota_remaining(::google::protobuf::int64 value);

  // optional int64 quota_renewal_rate = 9;
  void clear_quota_renewal_rate();
  static const int kQuotaRenewalRateFieldNumber = 9;
  ::google::protobuf::int64 quota_renewal_rate() const;
  void set_quota_renewal_rate(::google::protobuf::int64 value);

  // map<string, .coprocess.AccessDefinition> access_rights = 10;
  int access_rights_size() const;
  void clear_access_rights();
  static const int kAccessRightsFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >&
      access_rights() const;
  ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >*
      mutable_access_rights();

  // optional string org_id = 11;
  void clear_org_id();
  static const int kOrgIdFieldNumber = 11;
  const ::std::string& org_id() const;
  void set_org_id(const ::std::string& value);
  void set_org_id(const char* value);
  void set_org_id(const char* value, size_t size);
  ::std::string* mutable_org_id();
  ::std::string* release_org_id();
  void set_allocated_org_id(::std::string* org_id);
  ::std::string* unsafe_arena_release_org_id();
  void unsafe_arena_set_allocated_org_id(
      ::std::string* org_id);

  // optional string oauth_client_id = 12;
  void clear_oauth_client_id();
  static const int kOauthClientIdFieldNumber = 12;
  const ::std::string& oauth_client_id() const;
  void set_oauth_client_id(const ::std::string& value);
  void set_oauth_client_id(const char* value);
  void set_oauth_client_id(const char* value, size_t size);
  ::std::string* mutable_oauth_client_id();
  ::std::string* release_oauth_client_id();
  void set_allocated_oauth_client_id(::std::string* oauth_client_id);
  ::std::string* unsafe_arena_release_oauth_client_id();
  void unsafe_arena_set_allocated_oauth_client_id(
      ::std::string* oauth_client_id);

  // map<string, string> oauth_keys = 13;
  int oauth_keys_size() const;
  void clear_oauth_keys();
  static const int kOauthKeysFieldNumber = 13;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      oauth_keys() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_oauth_keys();

  // optional .coprocess.BasicAuthData basic_auth_data = 14;
  bool has_basic_auth_data() const;
  void clear_basic_auth_data();
  static const int kBasicAuthDataFieldNumber = 14;
  private:
  void _slow_mutable_basic_auth_data();
  void _slow_set_allocated_basic_auth_data(
      ::google::protobuf::Arena* message_arena, ::coprocess::BasicAuthData** basic_auth_data);
  ::coprocess::BasicAuthData* _slow_release_basic_auth_data();
  public:
  const ::coprocess::BasicAuthData& basic_auth_data() const;
  ::coprocess::BasicAuthData* mutable_basic_auth_data();
  ::coprocess::BasicAuthData* release_basic_auth_data();
  void set_allocated_basic_auth_data(::coprocess::BasicAuthData* basic_auth_data);
  ::coprocess::BasicAuthData* unsafe_arena_release_basic_auth_data();
  void unsafe_arena_set_allocated_basic_auth_data(
      ::coprocess::BasicAuthData* basic_auth_data);

  // optional .coprocess.JWTData jwt_data = 15;
  bool has_jwt_data() const;
  void clear_jwt_data();
  static const int kJwtDataFieldNumber = 15;
  private:
  void _slow_mutable_jwt_data();
  void _slow_set_allocated_jwt_data(
      ::google::protobuf::Arena* message_arena, ::coprocess::JWTData** jwt_data);
  ::coprocess::JWTData* _slow_release_jwt_data();
  public:
  const ::coprocess::JWTData& jwt_data() const;
  ::coprocess::JWTData* mutable_jwt_data();
  ::coprocess::JWTData* release_jwt_data();
  void set_allocated_jwt_data(::coprocess::JWTData* jwt_data);
  ::coprocess::JWTData* unsafe_arena_release_jwt_data();
  void unsafe_arena_set_allocated_jwt_data(
      ::coprocess::JWTData* jwt_data);

  // optional bool hmac_enabled = 16;
  void clear_hmac_enabled();
  static const int kHmacEnabledFieldNumber = 16;
  bool hmac_enabled() const;
  void set_hmac_enabled(bool value);

  // optional string hmac_secret = 17;
  void clear_hmac_secret();
  static const int kHmacSecretFieldNumber = 17;
  const ::std::string& hmac_secret() const;
  void set_hmac_secret(const ::std::string& value);
  void set_hmac_secret(const char* value);
  void set_hmac_secret(const char* value, size_t size);
  ::std::string* mutable_hmac_secret();
  ::std::string* release_hmac_secret();
  void set_allocated_hmac_secret(::std::string* hmac_secret);
  ::std::string* unsafe_arena_release_hmac_secret();
  void unsafe_arena_set_allocated_hmac_secret(
      ::std::string* hmac_secret);

  // optional bool is_inactive = 18;
  void clear_is_inactive();
  static const int kIsInactiveFieldNumber = 18;
  bool is_inactive() const;
  void set_is_inactive(bool value);

  // optional string apply_policy_id = 19;
  void clear_apply_policy_id();
  static const int kApplyPolicyIdFieldNumber = 19;
  const ::std::string& apply_policy_id() const;
  void set_apply_policy_id(const ::std::string& value);
  void set_apply_policy_id(const char* value);
  void set_apply_policy_id(const char* value, size_t size);
  ::std::string* mutable_apply_policy_id();
  ::std::string* release_apply_policy_id();
  void set_allocated_apply_policy_id(::std::string* apply_policy_id);
  ::std::string* unsafe_arena_release_apply_policy_id();
  void unsafe_arena_set_allocated_apply_policy_id(
      ::std::string* apply_policy_id);

  // optional int64 data_expires = 20;
  void clear_data_expires();
  static const int kDataExpiresFieldNumber = 20;
  ::google::protobuf::int64 data_expires() const;
  void set_data_expires(::google::protobuf::int64 value);

  // optional .coprocess.Monitor monitor = 21;
  bool has_monitor() const;
  void clear_monitor();
  static const int kMonitorFieldNumber = 21;
  private:
  void _slow_mutable_monitor();
  void _slow_set_allocated_monitor(
      ::google::protobuf::Arena* message_arena, ::coprocess::Monitor** monitor);
  ::coprocess::Monitor* _slow_release_monitor();
  public:
  const ::coprocess::Monitor& monitor() const;
  ::coprocess::Monitor* mutable_monitor();
  ::coprocess::Monitor* release_monitor();
  void set_allocated_monitor(::coprocess::Monitor* monitor);
  ::coprocess::Monitor* unsafe_arena_release_monitor();
  void unsafe_arena_set_allocated_monitor(
      ::coprocess::Monitor* monitor);

  // optional bool enable_detailed_recording = 22;
  void clear_enable_detailed_recording();
  static const int kEnableDetailedRecordingFieldNumber = 22;
  bool enable_detailed_recording() const;
  void set_enable_detailed_recording(bool value);

  // optional string metadata = 23;
  void clear_metadata();
  static const int kMetadataFieldNumber = 23;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);
  ::std::string* unsafe_arena_release_metadata();
  void unsafe_arena_set_allocated_metadata(
      ::std::string* metadata);

  // repeated string tags = 24;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 24;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string alias = 25;
  void clear_alias();
  static const int kAliasFieldNumber = 25;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);
  ::std::string* unsafe_arena_release_alias();
  void unsafe_arena_set_allocated_alias(
      ::std::string* alias);

  // optional string last_updated = 26;
  void clear_last_updated();
  static const int kLastUpdatedFieldNumber = 26;
  const ::std::string& last_updated() const;
  void set_last_updated(const ::std::string& value);
  void set_last_updated(const char* value);
  void set_last_updated(const char* value, size_t size);
  ::std::string* mutable_last_updated();
  ::std::string* release_last_updated();
  void set_allocated_last_updated(::std::string* last_updated);
  ::std::string* unsafe_arena_release_last_updated();
  void unsafe_arena_set_allocated_last_updated(
      ::std::string* last_updated);

  // optional int64 id_extractor_deadline = 27;
  void clear_id_extractor_deadline();
  static const int kIdExtractorDeadlineFieldNumber = 27;
  ::google::protobuf::int64 id_extractor_deadline() const;
  void set_id_extractor_deadline(::google::protobuf::int64 value);

  // optional int64 session_lifetime = 28;
  void clear_session_lifetime();
  static const int kSessionLifetimeFieldNumber = 28;
  ::google::protobuf::int64 session_lifetime() const;
  void set_session_lifetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:coprocess.SessionState)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::coprocess::AccessDefinition,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SessionState_AccessRightsEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::coprocess::AccessDefinition,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > access_rights_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      SessionState_OauthKeysEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > oauth_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr org_id_;
  ::google::protobuf::internal::ArenaStringPtr oauth_client_id_;
  ::google::protobuf::internal::ArenaStringPtr hmac_secret_;
  ::google::protobuf::internal::ArenaStringPtr apply_policy_id_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr last_updated_;
  ::coprocess::BasicAuthData* basic_auth_data_;
  ::coprocess::JWTData* jwt_data_;
  ::coprocess::Monitor* monitor_;
  ::google::protobuf::int64 last_check_;
  double allowance_;
  double rate_;
  double per_;
  ::google::protobuf::int64 expires_;
  ::google::protobuf::int64 quota_max_;
  ::google::protobuf::int64 quota_renews_;
  ::google::protobuf::int64 quota_remaining_;
  ::google::protobuf::int64 quota_renewal_rate_;
  ::google::protobuf::int64 data_expires_;
  ::google::protobuf::int64 id_extractor_deadline_;
  ::google::protobuf::int64 session_lifetime_;
  bool hmac_enabled_;
  bool is_inactive_;
  bool enable_detailed_recording_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fsession_5fstate_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fsession_5fstate_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fsession_5fstate_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fsession_5fstate_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SessionState> SessionState_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessSpec

// optional string url = 1;
inline void AccessSpec::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AccessSpec::url() const {
  // @@protoc_insertion_point(field_get:coprocess.AccessSpec.url)
  return url_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessSpec::set_url(const ::std::string& value) {
  
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.AccessSpec.url)
}
inline void AccessSpec::set_url(const char* value) {
  
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.AccessSpec.url)
}
inline void AccessSpec::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.AccessSpec.url)
}
inline ::std::string* AccessSpec::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.AccessSpec.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessSpec::release_url() {
  // @@protoc_insertion_point(field_release:coprocess.AccessSpec.url)
  
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessSpec::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.AccessSpec.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccessSpec::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.AccessSpec.url)
}
inline void AccessSpec::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.AccessSpec.url)
}

// repeated string methods = 2;
inline int AccessSpec::methods_size() const {
  return methods_.size();
}
inline void AccessSpec::clear_methods() {
  methods_.Clear();
}
inline const ::std::string& AccessSpec::methods(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.AccessSpec.methods)
  return methods_.Get(index);
}
inline ::std::string* AccessSpec::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.AccessSpec.methods)
  return methods_.Mutable(index);
}
inline void AccessSpec::set_methods(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:coprocess.AccessSpec.methods)
  methods_.Mutable(index)->assign(value);
}
inline void AccessSpec::set_methods(int index, const char* value) {
  methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coprocess.AccessSpec.methods)
}
inline void AccessSpec::set_methods(int index, const char* value, size_t size) {
  methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coprocess.AccessSpec.methods)
}
inline ::std::string* AccessSpec::add_methods() {
  // @@protoc_insertion_point(field_add_mutable:coprocess.AccessSpec.methods)
  return methods_.Add();
}
inline void AccessSpec::add_methods(const ::std::string& value) {
  methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coprocess.AccessSpec.methods)
}
inline void AccessSpec::add_methods(const char* value) {
  methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coprocess.AccessSpec.methods)
}
inline void AccessSpec::add_methods(const char* value, size_t size) {
  methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coprocess.AccessSpec.methods)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AccessSpec::methods() const {
  // @@protoc_insertion_point(field_list:coprocess.AccessSpec.methods)
  return methods_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AccessSpec::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.AccessSpec.methods)
  return &methods_;
}

inline const AccessSpec* AccessSpec::internal_default_instance() {
  return &AccessSpec_default_instance_.get();
}
// -------------------------------------------------------------------

// AccessDefinition

// optional string api_name = 1;
inline void AccessDefinition::clear_api_name() {
  api_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AccessDefinition::api_name() const {
  // @@protoc_insertion_point(field_get:coprocess.AccessDefinition.api_name)
  return api_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDefinition::set_api_name(const ::std::string& value) {
  
  api_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.AccessDefinition.api_name)
}
inline void AccessDefinition::set_api_name(const char* value) {
  
  api_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.AccessDefinition.api_name)
}
inline void AccessDefinition::set_api_name(const char* value,
    size_t size) {
  
  api_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.AccessDefinition.api_name)
}
inline ::std::string* AccessDefinition::mutable_api_name() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.AccessDefinition.api_name)
  return api_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessDefinition::release_api_name() {
  // @@protoc_insertion_point(field_release:coprocess.AccessDefinition.api_name)
  
  return api_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessDefinition::unsafe_arena_release_api_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.AccessDefinition.api_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return api_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccessDefinition::set_allocated_api_name(::std::string* api_name) {
  if (api_name != NULL) {
    
  } else {
    
  }
  api_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.AccessDefinition.api_name)
}
inline void AccessDefinition::unsafe_arena_set_allocated_api_name(
    ::std::string* api_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (api_name != NULL) {
    
  } else {
    
  }
  api_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      api_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.AccessDefinition.api_name)
}

// optional string api_id = 2;
inline void AccessDefinition::clear_api_id() {
  api_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AccessDefinition::api_id() const {
  // @@protoc_insertion_point(field_get:coprocess.AccessDefinition.api_id)
  return api_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDefinition::set_api_id(const ::std::string& value) {
  
  api_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.AccessDefinition.api_id)
}
inline void AccessDefinition::set_api_id(const char* value) {
  
  api_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.AccessDefinition.api_id)
}
inline void AccessDefinition::set_api_id(const char* value,
    size_t size) {
  
  api_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.AccessDefinition.api_id)
}
inline ::std::string* AccessDefinition::mutable_api_id() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.AccessDefinition.api_id)
  return api_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessDefinition::release_api_id() {
  // @@protoc_insertion_point(field_release:coprocess.AccessDefinition.api_id)
  
  return api_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessDefinition::unsafe_arena_release_api_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.AccessDefinition.api_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return api_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccessDefinition::set_allocated_api_id(::std::string* api_id) {
  if (api_id != NULL) {
    
  } else {
    
  }
  api_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.AccessDefinition.api_id)
}
inline void AccessDefinition::unsafe_arena_set_allocated_api_id(
    ::std::string* api_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (api_id != NULL) {
    
  } else {
    
  }
  api_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      api_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.AccessDefinition.api_id)
}

// repeated string versions = 3;
inline int AccessDefinition::versions_size() const {
  return versions_.size();
}
inline void AccessDefinition::clear_versions() {
  versions_.Clear();
}
inline const ::std::string& AccessDefinition::versions(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.AccessDefinition.versions)
  return versions_.Get(index);
}
inline ::std::string* AccessDefinition::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.AccessDefinition.versions)
  return versions_.Mutable(index);
}
inline void AccessDefinition::set_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:coprocess.AccessDefinition.versions)
  versions_.Mutable(index)->assign(value);
}
inline void AccessDefinition::set_versions(int index, const char* value) {
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coprocess.AccessDefinition.versions)
}
inline void AccessDefinition::set_versions(int index, const char* value, size_t size) {
  versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coprocess.AccessDefinition.versions)
}
inline ::std::string* AccessDefinition::add_versions() {
  // @@protoc_insertion_point(field_add_mutable:coprocess.AccessDefinition.versions)
  return versions_.Add();
}
inline void AccessDefinition::add_versions(const ::std::string& value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coprocess.AccessDefinition.versions)
}
inline void AccessDefinition::add_versions(const char* value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coprocess.AccessDefinition.versions)
}
inline void AccessDefinition::add_versions(const char* value, size_t size) {
  versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coprocess.AccessDefinition.versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AccessDefinition::versions() const {
  // @@protoc_insertion_point(field_list:coprocess.AccessDefinition.versions)
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AccessDefinition::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.AccessDefinition.versions)
  return &versions_;
}

// repeated .coprocess.AccessSpec allowed_urls = 4;
inline int AccessDefinition::allowed_urls_size() const {
  return allowed_urls_.size();
}
inline void AccessDefinition::clear_allowed_urls() {
  allowed_urls_.Clear();
}
inline const ::coprocess::AccessSpec& AccessDefinition::allowed_urls(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.AccessDefinition.allowed_urls)
  return allowed_urls_.Get(index);
}
inline ::coprocess::AccessSpec* AccessDefinition::mutable_allowed_urls(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.AccessDefinition.allowed_urls)
  return allowed_urls_.Mutable(index);
}
inline ::coprocess::AccessSpec* AccessDefinition::add_allowed_urls() {
  // @@protoc_insertion_point(field_add:coprocess.AccessDefinition.allowed_urls)
  return allowed_urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::coprocess::AccessSpec >*
AccessDefinition::mutable_allowed_urls() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.AccessDefinition.allowed_urls)
  return &allowed_urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::coprocess::AccessSpec >&
AccessDefinition::allowed_urls() const {
  // @@protoc_insertion_point(field_list:coprocess.AccessDefinition.allowed_urls)
  return allowed_urls_;
}

inline const AccessDefinition* AccessDefinition::internal_default_instance() {
  return &AccessDefinition_default_instance_.get();
}
// -------------------------------------------------------------------

// BasicAuthData

// optional string password = 1;
inline void BasicAuthData::clear_password() {
  password_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BasicAuthData::password() const {
  // @@protoc_insertion_point(field_get:coprocess.BasicAuthData.password)
  return password_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicAuthData::set_password(const ::std::string& value) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.BasicAuthData.password)
}
inline void BasicAuthData::set_password(const char* value) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.BasicAuthData.password)
}
inline void BasicAuthData::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.BasicAuthData.password)
}
inline ::std::string* BasicAuthData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.BasicAuthData.password)
  return password_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BasicAuthData::release_password() {
  // @@protoc_insertion_point(field_release:coprocess.BasicAuthData.password)
  
  return password_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BasicAuthData::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.BasicAuthData.password)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return password_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BasicAuthData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.BasicAuthData.password)
}
inline void BasicAuthData::unsafe_arena_set_allocated_password(
    ::std::string* password) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (password != NULL) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      password, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.BasicAuthData.password)
}

// optional string hash = 2;
inline void BasicAuthData::clear_hash() {
  hash_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BasicAuthData::hash() const {
  // @@protoc_insertion_point(field_get:coprocess.BasicAuthData.hash)
  return hash_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicAuthData::set_hash(const ::std::string& value) {
  
  hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.BasicAuthData.hash)
}
inline void BasicAuthData::set_hash(const char* value) {
  
  hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.BasicAuthData.hash)
}
inline void BasicAuthData::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.BasicAuthData.hash)
}
inline ::std::string* BasicAuthData::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.BasicAuthData.hash)
  return hash_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BasicAuthData::release_hash() {
  // @@protoc_insertion_point(field_release:coprocess.BasicAuthData.hash)
  
  return hash_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BasicAuthData::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.BasicAuthData.hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hash_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BasicAuthData::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.BasicAuthData.hash)
}
inline void BasicAuthData::unsafe_arena_set_allocated_hash(
    ::std::string* hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.BasicAuthData.hash)
}

inline const BasicAuthData* BasicAuthData::internal_default_instance() {
  return &BasicAuthData_default_instance_.get();
}
// -------------------------------------------------------------------

// JWTData

// optional string secret = 1;
inline void JWTData::clear_secret() {
  secret_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JWTData::secret() const {
  // @@protoc_insertion_point(field_get:coprocess.JWTData.secret)
  return secret_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JWTData::set_secret(const ::std::string& value) {
  
  secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.JWTData.secret)
}
inline void JWTData::set_secret(const char* value) {
  
  secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.JWTData.secret)
}
inline void JWTData::set_secret(const char* value,
    size_t size) {
  
  secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.JWTData.secret)
}
inline ::std::string* JWTData::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.JWTData.secret)
  return secret_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JWTData::release_secret() {
  // @@protoc_insertion_point(field_release:coprocess.JWTData.secret)
  
  return secret_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JWTData::unsafe_arena_release_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.JWTData.secret)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return secret_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JWTData::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.JWTData.secret)
}
inline void JWTData::unsafe_arena_set_allocated_secret(
    ::std::string* secret) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      secret, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.JWTData.secret)
}

inline const JWTData* JWTData::internal_default_instance() {
  return &JWTData_default_instance_.get();
}
// -------------------------------------------------------------------

// Monitor

// repeated double trigger_limits = 1;
inline int Monitor::trigger_limits_size() const {
  return trigger_limits_.size();
}
inline void Monitor::clear_trigger_limits() {
  trigger_limits_.Clear();
}
inline double Monitor::trigger_limits(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.Monitor.trigger_limits)
  return trigger_limits_.Get(index);
}
inline void Monitor::set_trigger_limits(int index, double value) {
  trigger_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:coprocess.Monitor.trigger_limits)
}
inline void Monitor::add_trigger_limits(double value) {
  trigger_limits_.Add(value);
  // @@protoc_insertion_point(field_add:coprocess.Monitor.trigger_limits)
}
inline const ::google::protobuf::RepeatedField< double >&
Monitor::trigger_limits() const {
  // @@protoc_insertion_point(field_list:coprocess.Monitor.trigger_limits)
  return trigger_limits_;
}
inline ::google::protobuf::RepeatedField< double >*
Monitor::mutable_trigger_limits() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.Monitor.trigger_limits)
  return &trigger_limits_;
}

inline const Monitor* Monitor::internal_default_instance() {
  return &Monitor_default_instance_.get();
}
// -------------------------------------------------------------------

// SessionState

// optional int64 last_check = 1;
inline void SessionState::clear_last_check() {
  last_check_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::last_check() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.last_check)
  return last_check_;
}
inline void SessionState::set_last_check(::google::protobuf::int64 value) {
  
  last_check_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.last_check)
}

// optional double allowance = 2;
inline void SessionState::clear_allowance() {
  allowance_ = 0;
}
inline double SessionState::allowance() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.allowance)
  return allowance_;
}
inline void SessionState::set_allowance(double value) {
  
  allowance_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.allowance)
}

// optional double rate = 3;
inline void SessionState::clear_rate() {
  rate_ = 0;
}
inline double SessionState::rate() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.rate)
  return rate_;
}
inline void SessionState::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.rate)
}

// optional double per = 4;
inline void SessionState::clear_per() {
  per_ = 0;
}
inline double SessionState::per() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.per)
  return per_;
}
inline void SessionState::set_per(double value) {
  
  per_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.per)
}

// optional int64 expires = 5;
inline void SessionState::clear_expires() {
  expires_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::expires() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.expires)
  return expires_;
}
inline void SessionState::set_expires(::google::protobuf::int64 value) {
  
  expires_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.expires)
}

// optional int64 quota_max = 6;
inline void SessionState::clear_quota_max() {
  quota_max_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::quota_max() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.quota_max)
  return quota_max_;
}
inline void SessionState::set_quota_max(::google::protobuf::int64 value) {
  
  quota_max_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.quota_max)
}

// optional int64 quota_renews = 7;
inline void SessionState::clear_quota_renews() {
  quota_renews_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::quota_renews() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.quota_renews)
  return quota_renews_;
}
inline void SessionState::set_quota_renews(::google::protobuf::int64 value) {
  
  quota_renews_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.quota_renews)
}

// optional int64 quota_remaining = 8;
inline void SessionState::clear_quota_remaining() {
  quota_remaining_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::quota_remaining() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.quota_remaining)
  return quota_remaining_;
}
inline void SessionState::set_quota_remaining(::google::protobuf::int64 value) {
  
  quota_remaining_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.quota_remaining)
}

// optional int64 quota_renewal_rate = 9;
inline void SessionState::clear_quota_renewal_rate() {
  quota_renewal_rate_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::quota_renewal_rate() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.quota_renewal_rate)
  return quota_renewal_rate_;
}
inline void SessionState::set_quota_renewal_rate(::google::protobuf::int64 value) {
  
  quota_renewal_rate_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.quota_renewal_rate)
}

// map<string, .coprocess.AccessDefinition> access_rights = 10;
inline int SessionState::access_rights_size() const {
  return access_rights_.size();
}
inline void SessionState::clear_access_rights() {
  access_rights_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >&
SessionState::access_rights() const {
  // @@protoc_insertion_point(field_map:coprocess.SessionState.access_rights)
  return access_rights_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::coprocess::AccessDefinition >*
SessionState::mutable_access_rights() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.SessionState.access_rights)
  return access_rights_.MutableMap();
}

// optional string org_id = 11;
inline void SessionState::clear_org_id() {
  org_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::org_id() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.org_id)
  return org_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_org_id(const ::std::string& value) {
  
  org_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.org_id)
}
inline void SessionState::set_org_id(const char* value) {
  
  org_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.org_id)
}
inline void SessionState::set_org_id(const char* value,
    size_t size) {
  
  org_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.org_id)
}
inline ::std::string* SessionState::mutable_org_id() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.org_id)
  return org_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_org_id() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.org_id)
  
  return org_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_org_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.org_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return org_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_org_id(::std::string* org_id) {
  if (org_id != NULL) {
    
  } else {
    
  }
  org_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), org_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.org_id)
}
inline void SessionState::unsafe_arena_set_allocated_org_id(
    ::std::string* org_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (org_id != NULL) {
    
  } else {
    
  }
  org_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      org_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.org_id)
}

// optional string oauth_client_id = 12;
inline void SessionState::clear_oauth_client_id() {
  oauth_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::oauth_client_id() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.oauth_client_id)
  return oauth_client_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_oauth_client_id(const ::std::string& value) {
  
  oauth_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.oauth_client_id)
}
inline void SessionState::set_oauth_client_id(const char* value) {
  
  oauth_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.oauth_client_id)
}
inline void SessionState::set_oauth_client_id(const char* value,
    size_t size) {
  
  oauth_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.oauth_client_id)
}
inline ::std::string* SessionState::mutable_oauth_client_id() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.oauth_client_id)
  return oauth_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_oauth_client_id() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.oauth_client_id)
  
  return oauth_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_oauth_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.oauth_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return oauth_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_oauth_client_id(::std::string* oauth_client_id) {
  if (oauth_client_id != NULL) {
    
  } else {
    
  }
  oauth_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.oauth_client_id)
}
inline void SessionState::unsafe_arena_set_allocated_oauth_client_id(
    ::std::string* oauth_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oauth_client_id != NULL) {
    
  } else {
    
  }
  oauth_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oauth_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.oauth_client_id)
}

// map<string, string> oauth_keys = 13;
inline int SessionState::oauth_keys_size() const {
  return oauth_keys_.size();
}
inline void SessionState::clear_oauth_keys() {
  oauth_keys_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SessionState::oauth_keys() const {
  // @@protoc_insertion_point(field_map:coprocess.SessionState.oauth_keys)
  return oauth_keys_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SessionState::mutable_oauth_keys() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.SessionState.oauth_keys)
  return oauth_keys_.MutableMap();
}

// optional .coprocess.BasicAuthData basic_auth_data = 14;
inline bool SessionState::has_basic_auth_data() const {
  return this != internal_default_instance() && basic_auth_data_ != NULL;
}
inline void SessionState::clear_basic_auth_data() {
  if (GetArenaNoVirtual() == NULL && basic_auth_data_ != NULL) delete basic_auth_data_;
  basic_auth_data_ = NULL;
}
inline const ::coprocess::BasicAuthData& SessionState::basic_auth_data() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.basic_auth_data)
  return basic_auth_data_ != NULL ? *basic_auth_data_
                         : *::coprocess::BasicAuthData::internal_default_instance();
}
inline ::coprocess::BasicAuthData* SessionState::mutable_basic_auth_data() {
  
  if (basic_auth_data_ == NULL) {
    _slow_mutable_basic_auth_data();
  }
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.basic_auth_data)
  return basic_auth_data_;
}
inline ::coprocess::BasicAuthData* SessionState::release_basic_auth_data() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.basic_auth_data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_basic_auth_data();
  } else {
    ::coprocess::BasicAuthData* temp = basic_auth_data_;
    basic_auth_data_ = NULL;
    return temp;
  }
}
inline  void SessionState::set_allocated_basic_auth_data(::coprocess::BasicAuthData* basic_auth_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete basic_auth_data_;
  }
  if (basic_auth_data != NULL) {
    _slow_set_allocated_basic_auth_data(message_arena, &basic_auth_data);
  }
  basic_auth_data_ = basic_auth_data;
  if (basic_auth_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.basic_auth_data)
}

// optional .coprocess.JWTData jwt_data = 15;
inline bool SessionState::has_jwt_data() const {
  return this != internal_default_instance() && jwt_data_ != NULL;
}
inline void SessionState::clear_jwt_data() {
  if (GetArenaNoVirtual() == NULL && jwt_data_ != NULL) delete jwt_data_;
  jwt_data_ = NULL;
}
inline const ::coprocess::JWTData& SessionState::jwt_data() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.jwt_data)
  return jwt_data_ != NULL ? *jwt_data_
                         : *::coprocess::JWTData::internal_default_instance();
}
inline ::coprocess::JWTData* SessionState::mutable_jwt_data() {
  
  if (jwt_data_ == NULL) {
    _slow_mutable_jwt_data();
  }
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.jwt_data)
  return jwt_data_;
}
inline ::coprocess::JWTData* SessionState::release_jwt_data() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.jwt_data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_jwt_data();
  } else {
    ::coprocess::JWTData* temp = jwt_data_;
    jwt_data_ = NULL;
    return temp;
  }
}
inline  void SessionState::set_allocated_jwt_data(::coprocess::JWTData* jwt_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete jwt_data_;
  }
  if (jwt_data != NULL) {
    _slow_set_allocated_jwt_data(message_arena, &jwt_data);
  }
  jwt_data_ = jwt_data;
  if (jwt_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.jwt_data)
}

// optional bool hmac_enabled = 16;
inline void SessionState::clear_hmac_enabled() {
  hmac_enabled_ = false;
}
inline bool SessionState::hmac_enabled() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.hmac_enabled)
  return hmac_enabled_;
}
inline void SessionState::set_hmac_enabled(bool value) {
  
  hmac_enabled_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.hmac_enabled)
}

// optional string hmac_secret = 17;
inline void SessionState::clear_hmac_secret() {
  hmac_secret_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::hmac_secret() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.hmac_secret)
  return hmac_secret_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_hmac_secret(const ::std::string& value) {
  
  hmac_secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.hmac_secret)
}
inline void SessionState::set_hmac_secret(const char* value) {
  
  hmac_secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.hmac_secret)
}
inline void SessionState::set_hmac_secret(const char* value,
    size_t size) {
  
  hmac_secret_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.hmac_secret)
}
inline ::std::string* SessionState::mutable_hmac_secret() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.hmac_secret)
  return hmac_secret_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_hmac_secret() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.hmac_secret)
  
  return hmac_secret_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_hmac_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.hmac_secret)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hmac_secret_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_hmac_secret(::std::string* hmac_secret) {
  if (hmac_secret != NULL) {
    
  } else {
    
  }
  hmac_secret_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmac_secret,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.hmac_secret)
}
inline void SessionState::unsafe_arena_set_allocated_hmac_secret(
    ::std::string* hmac_secret) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hmac_secret != NULL) {
    
  } else {
    
  }
  hmac_secret_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hmac_secret, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.hmac_secret)
}

// optional bool is_inactive = 18;
inline void SessionState::clear_is_inactive() {
  is_inactive_ = false;
}
inline bool SessionState::is_inactive() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.is_inactive)
  return is_inactive_;
}
inline void SessionState::set_is_inactive(bool value) {
  
  is_inactive_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.is_inactive)
}

// optional string apply_policy_id = 19;
inline void SessionState::clear_apply_policy_id() {
  apply_policy_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::apply_policy_id() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.apply_policy_id)
  return apply_policy_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_apply_policy_id(const ::std::string& value) {
  
  apply_policy_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.apply_policy_id)
}
inline void SessionState::set_apply_policy_id(const char* value) {
  
  apply_policy_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.apply_policy_id)
}
inline void SessionState::set_apply_policy_id(const char* value,
    size_t size) {
  
  apply_policy_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.apply_policy_id)
}
inline ::std::string* SessionState::mutable_apply_policy_id() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.apply_policy_id)
  return apply_policy_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_apply_policy_id() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.apply_policy_id)
  
  return apply_policy_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_apply_policy_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.apply_policy_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return apply_policy_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_apply_policy_id(::std::string* apply_policy_id) {
  if (apply_policy_id != NULL) {
    
  } else {
    
  }
  apply_policy_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apply_policy_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.apply_policy_id)
}
inline void SessionState::unsafe_arena_set_allocated_apply_policy_id(
    ::std::string* apply_policy_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (apply_policy_id != NULL) {
    
  } else {
    
  }
  apply_policy_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      apply_policy_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.apply_policy_id)
}

// optional int64 data_expires = 20;
inline void SessionState::clear_data_expires() {
  data_expires_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::data_expires() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.data_expires)
  return data_expires_;
}
inline void SessionState::set_data_expires(::google::protobuf::int64 value) {
  
  data_expires_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.data_expires)
}

// optional .coprocess.Monitor monitor = 21;
inline bool SessionState::has_monitor() const {
  return this != internal_default_instance() && monitor_ != NULL;
}
inline void SessionState::clear_monitor() {
  if (GetArenaNoVirtual() == NULL && monitor_ != NULL) delete monitor_;
  monitor_ = NULL;
}
inline const ::coprocess::Monitor& SessionState::monitor() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.monitor)
  return monitor_ != NULL ? *monitor_
                         : *::coprocess::Monitor::internal_default_instance();
}
inline ::coprocess::Monitor* SessionState::mutable_monitor() {
  
  if (monitor_ == NULL) {
    _slow_mutable_monitor();
  }
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.monitor)
  return monitor_;
}
inline ::coprocess::Monitor* SessionState::release_monitor() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.monitor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_monitor();
  } else {
    ::coprocess::Monitor* temp = monitor_;
    monitor_ = NULL;
    return temp;
  }
}
inline  void SessionState::set_allocated_monitor(::coprocess::Monitor* monitor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monitor_;
  }
  if (monitor != NULL) {
    _slow_set_allocated_monitor(message_arena, &monitor);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.monitor)
}

// optional bool enable_detailed_recording = 22;
inline void SessionState::clear_enable_detailed_recording() {
  enable_detailed_recording_ = false;
}
inline bool SessionState::enable_detailed_recording() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.enable_detailed_recording)
  return enable_detailed_recording_;
}
inline void SessionState::set_enable_detailed_recording(bool value) {
  
  enable_detailed_recording_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.enable_detailed_recording)
}

// optional string metadata = 23;
inline void SessionState::clear_metadata() {
  metadata_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::metadata() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.metadata)
  return metadata_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_metadata(const ::std::string& value) {
  
  metadata_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.metadata)
}
inline void SessionState::set_metadata(const char* value) {
  
  metadata_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.metadata)
}
inline void SessionState::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.metadata)
}
inline ::std::string* SessionState::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.metadata)
  return metadata_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_metadata() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.metadata)
  
  return metadata_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.metadata)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return metadata_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.metadata)
}
inline void SessionState::unsafe_arena_set_allocated_metadata(
    ::std::string* metadata) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      metadata, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.metadata)
}

// repeated string tags = 24;
inline int SessionState::tags_size() const {
  return tags_.size();
}
inline void SessionState::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& SessionState::tags(int index) const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.tags)
  return tags_.Get(index);
}
inline ::std::string* SessionState::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.tags)
  return tags_.Mutable(index);
}
inline void SessionState::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:coprocess.SessionState.tags)
  tags_.Mutable(index)->assign(value);
}
inline void SessionState::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.tags)
}
inline void SessionState::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.tags)
}
inline ::std::string* SessionState::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:coprocess.SessionState.tags)
  return tags_.Add();
}
inline void SessionState::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coprocess.SessionState.tags)
}
inline void SessionState::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coprocess.SessionState.tags)
}
inline void SessionState::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coprocess.SessionState.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SessionState::tags() const {
  // @@protoc_insertion_point(field_list:coprocess.SessionState.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SessionState::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:coprocess.SessionState.tags)
  return &tags_;
}

// optional string alias = 25;
inline void SessionState::clear_alias() {
  alias_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::alias() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.alias)
  return alias_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_alias(const ::std::string& value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.alias)
}
inline void SessionState::set_alias(const char* value) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.alias)
}
inline void SessionState::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.alias)
}
inline ::std::string* SessionState::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.alias)
  return alias_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_alias() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.alias)
  
  return alias_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.alias)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return alias_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.alias)
}
inline void SessionState::unsafe_arena_set_allocated_alias(
    ::std::string* alias) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      alias, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.alias)
}

// optional string last_updated = 26;
inline void SessionState::clear_last_updated() {
  last_updated_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionState::last_updated() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.last_updated)
  return last_updated_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_last_updated(const ::std::string& value) {
  
  last_updated_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.SessionState.last_updated)
}
inline void SessionState::set_last_updated(const char* value) {
  
  last_updated_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.SessionState.last_updated)
}
inline void SessionState::set_last_updated(const char* value,
    size_t size) {
  
  last_updated_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.SessionState.last_updated)
}
inline ::std::string* SessionState::mutable_last_updated() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.SessionState.last_updated)
  return last_updated_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::release_last_updated() {
  // @@protoc_insertion_point(field_release:coprocess.SessionState.last_updated)
  
  return last_updated_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionState::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.SessionState.last_updated)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return last_updated_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionState::set_allocated_last_updated(::std::string* last_updated) {
  if (last_updated != NULL) {
    
  } else {
    
  }
  last_updated_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_updated,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.SessionState.last_updated)
}
inline void SessionState::unsafe_arena_set_allocated_last_updated(
    ::std::string* last_updated) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (last_updated != NULL) {
    
  } else {
    
  }
  last_updated_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      last_updated, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.SessionState.last_updated)
}

// optional int64 id_extractor_deadline = 27;
inline void SessionState::clear_id_extractor_deadline() {
  id_extractor_deadline_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::id_extractor_deadline() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.id_extractor_deadline)
  return id_extractor_deadline_;
}
inline void SessionState::set_id_extractor_deadline(::google::protobuf::int64 value) {
  
  id_extractor_deadline_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.id_extractor_deadline)
}

// optional int64 session_lifetime = 28;
inline void SessionState::clear_session_lifetime() {
  session_lifetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionState::session_lifetime() const {
  // @@protoc_insertion_point(field_get:coprocess.SessionState.session_lifetime)
  return session_lifetime_;
}
inline void SessionState::set_session_lifetime(::google::protobuf::int64 value) {
  
  session_lifetime_ = value;
  // @@protoc_insertion_point(field_set:coprocess.SessionState.session_lifetime)
}

inline const SessionState* SessionState::internal_default_instance() {
  return &SessionState_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocess

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_coprocess_5fsession_5fstate_2eproto__INCLUDED
