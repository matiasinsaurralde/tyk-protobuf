// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_object.proto

#ifndef PROTOBUF_coprocess_5fobject_2eproto__INCLUDED
#define PROTOBUF_coprocess_5fobject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_lite.h>
#include "coprocess_mini_request_object.pb.h"
#include "coprocess_session_state.pb.h"
#include "coprocess_common.pb.h"
// @@protoc_insertion_point(includes)

namespace coprocess {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_coprocess_5fobject_2eproto();
void protobuf_InitDefaults_coprocess_5fobject_2eproto();
void protobuf_AssignDesc_coprocess_5fobject_2eproto();
void protobuf_ShutdownFile_coprocess_5fobject_2eproto();

class Event;
class EventReply;
class Object;

// ===================================================================

class Object : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const Object& default_instance();

  static const Object* internal_default_instance();

  void UnsafeArenaSwap(Object* other);
  void Swap(Object* other);

  // implements Message ----------------------------------------------

  inline Object* New() const { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object* other);
  void UnsafeMergeFrom(const Object& from);
  protected:
  explicit Object(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .coprocess.HookType hook_type = 1;
  void clear_hook_type();
  static const int kHookTypeFieldNumber = 1;
  ::coprocess::HookType hook_type() const;
  void set_hook_type(::coprocess::HookType value);

  // optional string hook_name = 2;
  void clear_hook_name();
  static const int kHookNameFieldNumber = 2;
  const ::std::string& hook_name() const;
  void set_hook_name(const ::std::string& value);
  void set_hook_name(const char* value);
  void set_hook_name(const char* value, size_t size);
  ::std::string* mutable_hook_name();
  ::std::string* release_hook_name();
  void set_allocated_hook_name(::std::string* hook_name);
  ::std::string* unsafe_arena_release_hook_name();
  void unsafe_arena_set_allocated_hook_name(
      ::std::string* hook_name);

  // optional .coprocess.MiniRequestObject request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  private:
  void _slow_mutable_request();
  void _slow_set_allocated_request(
      ::google::protobuf::Arena* message_arena, ::coprocess::MiniRequestObject** request);
  ::coprocess::MiniRequestObject* _slow_release_request();
  public:
  const ::coprocess::MiniRequestObject& request() const;
  ::coprocess::MiniRequestObject* mutable_request();
  ::coprocess::MiniRequestObject* release_request();
  void set_allocated_request(::coprocess::MiniRequestObject* request);
  ::coprocess::MiniRequestObject* unsafe_arena_release_request();
  void unsafe_arena_set_allocated_request(
      ::coprocess::MiniRequestObject* request);

  // optional .coprocess.SessionState session = 4;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  private:
  void _slow_mutable_session();
  void _slow_set_allocated_session(
      ::google::protobuf::Arena* message_arena, ::coprocess::SessionState** session);
  ::coprocess::SessionState* _slow_release_session();
  public:
  const ::coprocess::SessionState& session() const;
  ::coprocess::SessionState* mutable_session();
  ::coprocess::SessionState* release_session();
  void set_allocated_session(::coprocess::SessionState* session);
  ::coprocess::SessionState* unsafe_arena_release_session();
  void unsafe_arena_set_allocated_session(
      ::coprocess::SessionState* session);

  // map<string, string> metadata = 5;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // map<string, string> spec = 6;
  int spec_size() const;
  void clear_spec();
  static const int kSpecFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      spec() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_spec();

  // @@protoc_insertion_point(class_scope:coprocess.Object)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Object_MetadataEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Object_SpecEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > spec_;
  ::google::protobuf::internal::ArenaStringPtr hook_name_;
  ::coprocess::MiniRequestObject* request_;
  ::coprocess::SessionState* session_;
  int hook_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fobject_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fobject_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fobject_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fobject_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Object> Object_default_instance_;

// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const Event& default_instance();

  static const Event* internal_default_instance();

  void UnsafeArenaSwap(Event* other);
  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  void UnsafeMergeFrom(const Event& from);
  protected:
  explicit Event(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);
  ::std::string* unsafe_arena_release_payload();
  void unsafe_arena_set_allocated_payload(
      ::std::string* payload);

  // @@protoc_insertion_point(class_scope:coprocess.Event)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fobject_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fobject_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fobject_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fobject_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Event> Event_default_instance_;

// -------------------------------------------------------------------

class EventReply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:coprocess.EventReply) */ {
 public:
  EventReply();
  virtual ~EventReply();

  EventReply(const EventReply& from);

  inline EventReply& operator=(const EventReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const EventReply& default_instance();

  static const EventReply* internal_default_instance();

  void UnsafeArenaSwap(EventReply* other);
  void Swap(EventReply* other);

  // implements Message ----------------------------------------------

  inline EventReply* New() const { return New(NULL); }

  EventReply* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EventReply& from);
  void MergeFrom(const EventReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventReply* other);
  void UnsafeMergeFrom(const EventReply& from);
  protected:
  explicit EventReply(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coprocess.EventReply)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_coprocess_5fobject_2eproto_impl();
  friend void  protobuf_AddDesc_coprocess_5fobject_2eproto_impl();
  friend void protobuf_AssignDesc_coprocess_5fobject_2eproto();
  friend void protobuf_ShutdownFile_coprocess_5fobject_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EventReply> EventReply_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional .coprocess.HookType hook_type = 1;
inline void Object::clear_hook_type() {
  hook_type_ = 0;
}
inline ::coprocess::HookType Object::hook_type() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.hook_type)
  return static_cast< ::coprocess::HookType >(hook_type_);
}
inline void Object::set_hook_type(::coprocess::HookType value) {
  
  hook_type_ = value;
  // @@protoc_insertion_point(field_set:coprocess.Object.hook_type)
}

// optional string hook_name = 2;
inline void Object::clear_hook_name() {
  hook_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Object::hook_name() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.hook_name)
  return hook_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_hook_name(const ::std::string& value) {
  
  hook_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.Object.hook_name)
}
inline void Object::set_hook_name(const char* value) {
  
  hook_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.Object.hook_name)
}
inline void Object::set_hook_name(const char* value,
    size_t size) {
  
  hook_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.Object.hook_name)
}
inline ::std::string* Object::mutable_hook_name() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.Object.hook_name)
  return hook_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Object::release_hook_name() {
  // @@protoc_insertion_point(field_release:coprocess.Object.hook_name)
  
  return hook_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Object::unsafe_arena_release_hook_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.Object.hook_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hook_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Object::set_allocated_hook_name(::std::string* hook_name) {
  if (hook_name != NULL) {
    
  } else {
    
  }
  hook_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hook_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.hook_name)
}
inline void Object::unsafe_arena_set_allocated_hook_name(
    ::std::string* hook_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hook_name != NULL) {
    
  } else {
    
  }
  hook_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hook_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.Object.hook_name)
}

// optional .coprocess.MiniRequestObject request = 3;
inline bool Object::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void Object::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::coprocess::MiniRequestObject& Object::request() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.request)
  return request_ != NULL ? *request_
                         : *::coprocess::MiniRequestObject::internal_default_instance();
}
inline ::coprocess::MiniRequestObject* Object::mutable_request() {
  
  if (request_ == NULL) {
    _slow_mutable_request();
  }
  // @@protoc_insertion_point(field_mutable:coprocess.Object.request)
  return request_;
}
inline ::coprocess::MiniRequestObject* Object::release_request() {
  // @@protoc_insertion_point(field_release:coprocess.Object.request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_request();
  } else {
    ::coprocess::MiniRequestObject* temp = request_;
    request_ = NULL;
    return temp;
  }
}
inline  void Object::set_allocated_request(::coprocess::MiniRequestObject* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request != NULL) {
    _slow_set_allocated_request(message_arena, &request);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.request)
}

// optional .coprocess.SessionState session = 4;
inline bool Object::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void Object::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) delete session_;
  session_ = NULL;
}
inline const ::coprocess::SessionState& Object::session() const {
  // @@protoc_insertion_point(field_get:coprocess.Object.session)
  return session_ != NULL ? *session_
                         : *::coprocess::SessionState::internal_default_instance();
}
inline ::coprocess::SessionState* Object::mutable_session() {
  
  if (session_ == NULL) {
    _slow_mutable_session();
  }
  // @@protoc_insertion_point(field_mutable:coprocess.Object.session)
  return session_;
}
inline ::coprocess::SessionState* Object::release_session() {
  // @@protoc_insertion_point(field_release:coprocess.Object.session)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_session();
  } else {
    ::coprocess::SessionState* temp = session_;
    session_ = NULL;
    return temp;
  }
}
inline  void Object::set_allocated_session(::coprocess::SessionState* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_;
  }
  if (session != NULL) {
    _slow_set_allocated_session(message_arena, &session);
  }
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocess.Object.session)
}

// map<string, string> metadata = 5;
inline int Object::metadata_size() const {
  return metadata_.size();
}
inline void Object::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Object::metadata() const {
  // @@protoc_insertion_point(field_map:coprocess.Object.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Object::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.Object.metadata)
  return metadata_.MutableMap();
}

// map<string, string> spec = 6;
inline int Object::spec_size() const {
  return spec_.size();
}
inline void Object::clear_spec() {
  spec_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Object::spec() const {
  // @@protoc_insertion_point(field_map:coprocess.Object.spec)
  return spec_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Object::mutable_spec() {
  // @@protoc_insertion_point(field_mutable_map:coprocess.Object.spec)
  return spec_.MutableMap();
}

inline const Object* Object::internal_default_instance() {
  return &Object_default_instance_.get();
}
// -------------------------------------------------------------------

// Event

// optional string payload = 1;
inline void Event::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Event::payload() const {
  // @@protoc_insertion_point(field_get:coprocess.Event.payload)
  return payload_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:coprocess.Event.payload)
}
inline void Event::set_payload(const char* value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:coprocess.Event.payload)
}
inline void Event::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:coprocess.Event.payload)
}
inline ::std::string* Event::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:coprocess.Event.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Event::release_payload() {
  // @@protoc_insertion_point(field_release:coprocess.Event.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Event::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:coprocess.Event.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Event::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:coprocess.Event.payload)
}
inline void Event::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocess.Event.payload)
}

inline const Event* Event::internal_default_instance() {
  return &Event_default_instance_.get();
}
// -------------------------------------------------------------------

// EventReply

inline const EventReply* EventReply::internal_default_instance() {
  return &EventReply_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocess

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_coprocess_5fobject_2eproto__INCLUDED
